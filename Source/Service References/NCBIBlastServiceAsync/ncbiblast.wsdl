<?xml version="1.0" encoding="utf-8"?>
<wsdl:definitions xmlns:tns="http://soap.jdispatcher.ebi.ac.uk" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="ncbiblast" targetNamespace="http://soap.jdispatcher.ebi.ac.uk" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
  <wsdl:documentation>BLAST stands for Basic Local Alignment Search Tool.The emphasis of this tool is to find regions of sequence similarity, which will yield functional and evolutionary clues about the structure and function of your sequence.</wsdl:documentation>
  <wsdl:types>
    <xsd:schema xmlns="http://soap.jdispatcher.ebi.ac.uk" attributeFormDefault="unqualified" elementFormDefault="unqualified" targetNamespace="http://soap.jdispatcher.ebi.ac.uk">
      <xsd:complexType name="InputParameters">
        <xsd:annotation>
          <xsd:documentation xml:lang="en">Input parameters for the tool</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="1" maxOccurs="1" name="program" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation xml:lang="en">Program [The BLAST program to be used for the Sequence Similarity Search.]</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="0" maxOccurs="1" name="matrix" nillable="true" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation xml:lang="en">Matrix [The comparison matrix to be used to score alignments when searching the database]</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="0" maxOccurs="1" name="alignments" nillable="true" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation xml:lang="en">Alignments [Maximum number of match alignments reported in the result output.]</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="0" maxOccurs="1" name="scores" nillable="true" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation xml:lang="en">Scores [Maximum number of match score summaries reported in the result output.]</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="0" maxOccurs="1" name="exp" nillable="true" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation xml:lang="en">Expectation value threshold [Limits the number of scores and alignments reported based on the expectation value. This is the maximum number of times the match is expected to occur by chance.]</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="0" maxOccurs="1" name="dropoff" nillable="true" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation xml:lang="en">Dropoff [The amount a score can drop before extension of word hits is halted]</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="0" maxOccurs="1" name="match_scores" nillable="true" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation xml:lang="en">Match/mismatch scores [Many nucleotide searches use a simple scoring system that consists of a "reward" for a match and a "penalty" for a mismatch. The (absolute) reward/penalty ratio should be increased as one looks at more divergent sequences. A ratio of 0.33 (1/-3) is appropriate for sequences that are about 99% conserved; a ratio of 0.5 (1/-2) is best for sequences that are 95% conserved; a ratio of about one (1/-1) is best for sequences that are 75% conserved.]</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="0" maxOccurs="1" name="gapopen" nillable="true" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation xml:lang="en">Gap open [Penalty taken away from the score when a gap is created in sequence. Increasing the gap openning penalty will decrease the number of gaps in the final alignment.]</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="0" maxOccurs="1" name="gapext" nillable="true" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation xml:lang="en">Gap extend [Penalty taken away from the score for each base or residue in the gap. Increasing the gap extension penalty favors short gaps in the final alignment, conversly decreasing the gap extension penalty favors long gaps in the final alignment.]</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="0" maxOccurs="1" name="filter" nillable="true" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation xml:lang="en">Filter [Filter regions of low sequence complexity. This can avoid issues with low complexity sequences where matches are found due to composition rather than meaningful sequence similarity. However in some cases filtering also masks regions of interest and so should be used with caution.]</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="0" maxOccurs="1" name="seqrange" nillable="true" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation xml:lang="en">Sequence range [Specify a range or section of the input sequence to use in the search. Example: Specifying '34-89' in an input sequence of total length 100, will tell BLAST to only use residues 34 to 89, inclusive.]</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="0" maxOccurs="1" name="gapalign" nillable="true" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation xml:lang="en">Gapalign [This is a true/false setting that tells the program the perform optimised alignments within regions involving gaps. If set to true, the program will perform an alignment using gaps. Otherwise, if it is set to false, it will report only individual HSP where two sequence match each other, and thus will not produce alignments with gaps.]</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="0" maxOccurs="1" name="align" nillable="true" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation xml:lang="en">Align views [Formating for the alignments]</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" maxOccurs="1" name="stype" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation xml:lang="en">Sequence type [Indicates if the sequence is protein or DNA/RNA.]</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="0" maxOccurs="1" name="sequence" nillable="true" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation xml:lang="en">Sequence [Sequence]</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" maxOccurs="1" name="database" type="tns:ArrayOfString">
            <xsd:annotation>
              <xsd:documentation xml:lang="en">Database [Database]</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ArrayOfString">
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="string" nillable="true" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="wsResultTypes">
        <xsd:annotation>
          <xsd:documentation xml:lang="en">List of renderers available to output the result of the job</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="type" type="tns:wsResultType" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="wsResultType">
        <xsd:annotation>
          <xsd:documentation xml:lang="en">Details about a renderer used to output the result of the job</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="1" name="description" nillable="true" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation xml:lang="en">A short description of the renderer</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" maxOccurs="1" name="fileSuffix" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation xml:lang="en">A suggested file suffix to be used when saving the data formatted by the renderer</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" maxOccurs="1" name="identifier" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation xml:lang="en">The renderer identifier to be used when invoking the getResult() method</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="0" maxOccurs="1" name="label" nillable="true" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation xml:lang="en">A more appropriate name for the renderer (more meaningful than the identifier)</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" maxOccurs="1" name="mediaType" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation xml:lang="en">The media type (MIME) of the renderer's output</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="wsRawOutputParameters">
        <xsd:annotation>
          <xsd:documentation xml:lang="en">A set of parameters passed to a renderer when formatting the data</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="1" maxOccurs="unbounded" name="parameter" type="tns:wsRawOutputParameter" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="wsRawOutputParameter">
        <xsd:annotation>
          <xsd:documentation xml:lang="en">A parameter used by the renderer</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="1" maxOccurs="1" name="name" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation xml:lang="en">The name of the parameter</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" maxOccurs="1" name="value" type="tns:ArrayOfString">
            <xsd:annotation>
              <xsd:documentation xml:lang="en">The parameter value as an array of String</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="wsParameters">
        <xsd:annotation>
          <xsd:documentation xml:lang="en">List the names of the tool parameters</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="id" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="wsParameterDetails">
        <xsd:annotation>
          <xsd:documentation xml:lang="en">Details about a tool parameter</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="0" name="name" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation xml:lang="en">The name of the parameter</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="0" name="description" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation xml:lang="en">A short description of the parameter</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" maxOccurs="1" name="type" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation xml:lang="en">The type of the parameter</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="0" name="values" type="tns:wsParameterValues">
            <xsd:annotation>
              <xsd:documentation xml:lang="en">The list of values available for this parameter</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="wsParameterValues">
        <xsd:annotation>
          <xsd:documentation xml:lang="en">The list of parameter values</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="value" type="tns:wsParameterValue" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="wsParameterValue">
        <xsd:annotation>
          <xsd:documentation xml:lang="en">The details about a parameter values</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="1" name="label" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation xml:lang="en">A meaningful label for the parameter value</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="1" maxOccurs="1" name="value" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation xml:lang="en">The real value</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="defaultValue" type="xsd:boolean">
            <xsd:annotation>
              <xsd:documentation xml:lang="en">A flag indicating whether this value is a default value or not</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="0" maxOccurs="1" name="properties" type="tns:wsProperties">
            <xsd:annotation>
              <xsd:documentation xml:lang="en">A set of additional properties associated with the parameter value</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="wsProperties">
        <xsd:annotation>
          <xsd:documentation xml:lang="en">A set of properties</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="0" maxOccurs="unbounded" name="property" type="tns:wsProperty" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="wsProperty">
        <xsd:annotation>
          <xsd:documentation xml:lang="en">A key/value pair association of information</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="1" maxOccurs="1" name="key" type="xsd:string" />
          <xsd:element minOccurs="1" maxOccurs="1" name="value" type="xsd:string" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="run">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="email" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation xml:lang="en">User email address</xsd:documentation>
              </xsd:annotation>
            </xsd:element>
            <xsd:element minOccurs="0" maxOccurs="1" name="title" nillable="true" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation xml:lang="en">A title to identify the analysis job</xsd:documentation>
              </xsd:annotation>
            </xsd:element>
            <xsd:element minOccurs="1" maxOccurs="1" name="parameters" type="tns:InputParameters">
              <xsd:annotation>
                <xsd:documentation xml:lang="en">The list of parameters to be used for launching the analysis</xsd:documentation>
              </xsd:annotation>
            </xsd:element>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="runResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="jobId" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation xml:lang="en">A unique identifier for the analysis job</xsd:documentation>
              </xsd:annotation>
            </xsd:element>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="getStatus">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="jobId" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation xml:lang="en">An identifier for the job to check</xsd:documentation>
              </xsd:annotation>
            </xsd:element>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="getStatusResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="status" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation xml:lang="en">The status of the job (FINISHED, ERROR, RUNNING, NOT_FOUND or FAILURE)</xsd:documentation>
              </xsd:annotation>
            </xsd:element>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="getResultTypes">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="jobId" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation xml:lang="en">An identifier for the job to check</xsd:documentation>
              </xsd:annotation>
            </xsd:element>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="getResultTypesResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="resultTypes" type="tns:wsResultTypes">
              <xsd:annotation>
                <xsd:documentation xml:lang="en">The list of renderers available</xsd:documentation>
              </xsd:annotation>
            </xsd:element>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="getResult">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="jobId" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation xml:lang="en">An identifier for the job to check</xsd:documentation>
              </xsd:annotation>
            </xsd:element>
            <xsd:element minOccurs="1" maxOccurs="1" name="type" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation xml:lang="en">The renderer to be used to format the output</xsd:documentation>
              </xsd:annotation>
            </xsd:element>
            <xsd:element minOccurs="0" maxOccurs="1" name="parameters" nillable="true" type="tns:wsRawOutputParameters">
              <xsd:annotation>
                <xsd:documentation xml:lang="en">A list of parameters to be passed on to the renderer</xsd:documentation>
              </xsd:annotation>
            </xsd:element>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="getResultResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="output" nillable="true" type="xsd:base64Binary">
              <xsd:annotation>
                <xsd:documentation xml:lang="en">Base64 encoded data corresponding to the output of the job formatted by the renderer</xsd:documentation>
              </xsd:annotation>
            </xsd:element>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="getParameterDetails">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="parameterId" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation xml:lang="en">The identifier for the parameter</xsd:documentation>
              </xsd:annotation>
            </xsd:element>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="getParameterDetailsResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="0" name="parameterDetails" type="tns:wsParameterDetails">
              <xsd:annotation>
                <xsd:documentation xml:lang="en">The parameter details</xsd:documentation>
              </xsd:annotation>
            </xsd:element>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="getParameters">
        <xsd:complexType />
      </xsd:element>
      <xsd:element name="getParametersResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element minOccurs="1" maxOccurs="1" name="parameters" type="tns:wsParameters">
              <xsd:annotation>
                <xsd:documentation xml:lang="en">The list of parameter available for this tool</xsd:documentation>
              </xsd:annotation>
            </xsd:element>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
    </xsd:schema>
  </wsdl:types>
  <wsdl:message name="runResponse">
    <wsdl:part name="parameters" element="tns:runResponse" />
  </wsdl:message>
  <wsdl:message name="runRequest">
    <wsdl:part name="parameters" element="tns:run" />
  </wsdl:message>
  <wsdl:message name="getStatusResponse">
    <wsdl:part name="parameters" element="tns:getStatusResponse" />
  </wsdl:message>
  <wsdl:message name="getStatusRequest">
    <wsdl:part name="parameters" element="tns:getStatus" />
  </wsdl:message>
  <wsdl:message name="getResultTypesResponse">
    <wsdl:part name="parameters" element="tns:getResultTypesResponse" />
  </wsdl:message>
  <wsdl:message name="getResultTypesRequest">
    <wsdl:part name="parameters" element="tns:getResultTypes" />
  </wsdl:message>
  <wsdl:message name="getResultResponse">
    <wsdl:part name="parameters" element="tns:getResultResponse" />
  </wsdl:message>
  <wsdl:message name="getResultRequest">
    <wsdl:part name="parameters" element="tns:getResult" />
  </wsdl:message>
  <wsdl:message name="getParameterDetailsResponse">
    <wsdl:part name="parameters" element="tns:getParameterDetailsResponse" />
  </wsdl:message>
  <wsdl:message name="getParameterDetailsRequest">
    <wsdl:part name="parameters" element="tns:getParameterDetails" />
  </wsdl:message>
  <wsdl:message name="getParametersResponse">
    <wsdl:part name="parameters" element="tns:getParametersResponse" />
  </wsdl:message>
  <wsdl:message name="getParametersRequest">
    <wsdl:part name="parameters" element="tns:getParameters" />
  </wsdl:message>
  <wsdl:portType name="JDispatcherService">
    <wsdl:operation name="run">
      <wsdl:documentation>Submit an analysis job</wsdl:documentation>
      <wsdl:input name="runRequest" message="tns:runRequest" />
      <wsdl:output name="runResponse" message="tns:runResponse" />
    </wsdl:operation>
    <wsdl:operation name="getStatus">
      <wsdl:documentation>Get the status of a submitted job</wsdl:documentation>
      <wsdl:input name="getStatusRequest" message="tns:getStatusRequest" />
      <wsdl:output name="getStatusResponse" message="tns:getStatusResponse" />
    </wsdl:operation>
    <wsdl:operation name="getResultTypes">
      <wsdl:documentation>Get the list of renderers available to output a job result (i.e. the list of available output types)</wsdl:documentation>
      <wsdl:input name="getResultTypesRequest" message="tns:getResultTypesRequest" />
      <wsdl:output name="getResultTypesResponse" message="tns:getResultTypesResponse" />
    </wsdl:operation>
    <wsdl:operation name="getResult">
      <wsdl:documentation>Get a job result formatted using a particular renderer</wsdl:documentation>
      <wsdl:input name="getResultRequest" message="tns:getResultRequest" />
      <wsdl:output name="getResultResponse" message="tns:getResultResponse" />
    </wsdl:operation>
    <wsdl:operation name="getParameters">
      <wsdl:documentation>List the names of the parameters available before submission</wsdl:documentation>
      <wsdl:input name="getParametersRequest" message="tns:getParametersRequest" />
      <wsdl:output name="getParametersResponse" message="tns:getParametersResponse" />
    </wsdl:operation>
    <wsdl:operation name="getParameterDetails">
      <wsdl:documentation>Get some details about a parameter (e.g. name, description, values, etc.)</wsdl:documentation>
      <wsdl:input name="getParameterDetailsRequest" message="tns:getParameterDetailsRequest" />
      <wsdl:output name="getParameterDetailsResponse" message="tns:getParameterDetailsResponse" />
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="JDispatcherServiceHttpBinding" type="tns:JDispatcherService">
    <soap:binding transport="http://schemas.xmlsoap.org/soap/http" />
    <wsdl:operation name="run">
      <wsdl:documentation>Submit an analysis job</wsdl:documentation>
      <soap:operation soapAction="urn:Run" />
      <wsdl:input name="runRequest">
        <soap:body use="literal" />
      </wsdl:input>
      <wsdl:output name="runResponse">
        <soap:body use="literal" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getStatus">
      <wsdl:documentation>Get the status of a submitted job</wsdl:documentation>
      <soap:operation soapAction="urn:GetStatus" />
      <wsdl:input name="getStatusRequest">
        <soap:body use="literal" />
      </wsdl:input>
      <wsdl:output name="getStatusResponse">
        <soap:body use="literal" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getResultTypes">
      <wsdl:documentation>Get the list of renderers available to output a job result (i.e. the list of available output types)</wsdl:documentation>
      <soap:operation soapAction="urn:GetResultTypes" />
      <wsdl:input name="getResultTypesRequest">
        <soap:body use="literal" />
      </wsdl:input>
      <wsdl:output name="getResultTypesResponse">
        <soap:body use="literal" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getResult">
      <wsdl:documentation>Get a job result formatted using a particular renderer</wsdl:documentation>
      <soap:operation soapAction="urn:GetResult" />
      <wsdl:input name="getResultRequest">
        <soap:body use="literal" />
      </wsdl:input>
      <wsdl:output name="getResultResponse">
        <soap:body use="literal" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getParameters">
      <wsdl:documentation>List the names of the parameters available before submission</wsdl:documentation>
      <soap:operation soapAction="urn:GetParameters" />
      <wsdl:input name="getParametersRequest">
        <soap:body use="literal" />
      </wsdl:input>
      <wsdl:output name="getParametersResponse">
        <soap:body use="literal" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getParameterDetails">
      <wsdl:documentation>Get some details about a parameter (e.g. name, description, values, etc.)</wsdl:documentation>
      <soap:operation soapAction="urn:GetParameterDetails" />
      <wsdl:input name="getParameterDetailsRequest">
        <soap:body use="literal" />
      </wsdl:input>
      <wsdl:output name="getParameterDetailsResponse">
        <soap:body use="literal" />
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="JDispatcherService">
    <wsdl:port name="JDispatcherServiceHttpPort" binding="tns:JDispatcherServiceHttpBinding">
      <soap:address location="http://www.ebi.ac.uk/Tools/services/soap/ncbiblast" />
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>